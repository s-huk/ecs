input { 
	#stdin { }
	kafka {
		#bootstrap_servers => "172.16.16.66:59092,172.16.16.74:59092,172.16.16.75:59092"
		bootstrap_servers => "172.16.16.66:9093,172.16.16.74:9093,172.16.16.75:9093"
		topics => ["ops_auth_log"]
		group_id => "amda"
		security_protocol => "SSL"
		ssl_keystore_location => "/etc/logstash/kafka_client.jks"
		ssl_keystore_password => "123456"
		ssl_truststore_location => "/etc/logstash/keystore.jks"
		ssl_truststore_password => "123456"		
        }
}

filter {
	if "Accepted" in [message] or "Failed" in [message]{
		grok {
			match => { "message" => ["%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} sshd(?:\[%{POSINT:system.auth.pid}\])?: %{DATA:system.auth.ssh.event} %{DATA:system.auth.ssh.method} for (invalid user )?%{DATA:system.auth.user} from %{IPORHOST:system.auth.ip} port %{NUMBER:system.auth.port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?"]}
			remove_field => [ "message" ] 
		}
	}
	else if "Invalid" in [message]{
                grok {
			match => { "message" => ["%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} sshd(?:\[%{POSINT:system.auth.pid}\])?: %{DATA:system.auth.ssh.event} user %{DATA:system.auth.user} from %{IPORHOST:system.auth.ip}"]}
                        remove_field => [ "message" ]
                }
	}
	else {
                grok {
			match => { "message" => ["%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} sudo(?:\[%{POSINT:system.auth.pid}\])?: \s*%{DATA:system.auth.user} :( %{DATA:system.auth.sudo.error} ;)? TTY=%{DATA:system.auth.sudo.tty} ; PWD=%{DATA:system.auth.sudo.pwd} ; USER=%{DATA:system.auth.sudo.user} ; COMMAND=%{GREEDYDATA:system.auth.sudo.command}"]}
                        remove_field => [ "message" ]
                }
	}
	if "_grokparsefailure" in [tags] {
		 drop { }
	}
}

output {
	elasticsearch {
		hosts => ["localhost:9200"]
		index => "filebeat-auth_log-%{+YYYY.MM.dd}"
		#template_name => "auth_log"
		#manage_template => false
                #template_overwrite => true
                #template => "/etc/logstash/auth_log.json"
        }
	#stdout { codec => rubydebug }
}

