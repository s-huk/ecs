input {
  pipeline {
    address => "reporting-backend-service_fw-reports"
  }
}
filter {
  date {
    match => [ "[@metadata][kafka][timestamp]", "ISO8601" ]
  }
  mutate {
    rename => {
      "[box][fw]" => "[box][fw_lit]"
      "[fw-update][from_version]" => "[fw-update][from_version_lit]"
      "[fw-update][to_version]" => "[fw-update][to_version_lit]"
    }
    remove_field => [ "[type]", "[env]", "[@version]" ]
  }
  grok {
    match => { "[box][fw_lit]" => "^%{INT:[box][major]}.%{INT:[box][minor]}.%{INT:[box][patch]}$" }
    remove_field => [ "[box][fw_lit]" ]
  }
  grok {
    match => { "[fw-update][from_version_lit]" => "^%{INT:[fw-update][from_version][major]}.%{INT:[fw-update][from_version][minor]}.%{INT:[fw-update][from_version][patch]},%{INT:[fw-update][from_version][buildnumber]}$" }
    remove_field => [ "[fw-update][from_version_lit]" ]
  }
  grok {
    match => { "[fw-update][to_version_lit]" => "^%{INT:[fw-update][to_version][major]}.%{INT:[fw-update][to_version][minor]}.%{INT:[fw-update][to_version][patch]},%{INT:[fw-update][to_version][buildnumber]}$" }
    remove_field => [ "[fw-update][to_version_lit]" ]
  }
  mutate {
    convert => {
      "[box][major]" => "integer"
      "[box][minor]" => "integer"
      "[box][patch]" => "integer"
      "[fw-update][from_version][major]" => "integer"
      "[fw-update][from_version][minor]" => "integer"
      "[fw-update][from_version][patch]" => "integer"
      "[fw-update][from_version][buildnumber]" => "integer"
      "[fw-update][to_version][major]" => "integer"
      "[fw-update][to_version][minor]" => "integer"
      "[fw-update][to_version][patch]" => "integer"
      "[fw-update][to_version][buildnumber]" => "integer"
    }
  }
  ruby {
    code => '
      unless event.get("[box][minor]").nil? || event.get("[box][patch]").nil?
        event.set(
          "[box][fw]",
          format("%02d.%02d",
            event.get("[box][minor]"),
            event.get("[box][patch]")
          )
        )
      end
      unless event.get("[fw-update][from_version]").nil?
        event.set(
          "[fw-update][from_version][fw]",
          format("%02d.%02d",
            event.get("[fw-update][from_version][minor]"),
            event.get("[fw-update][from_version][patch]")
          )
        )
      end
      unless event.get("[fw-update][to_version]").nil?
        event.set(
          "[fw-update][to_version][fw]",
          format("%02d.%02d",
            event.get("[fw-update][to_version][minor]"),
            event.get("[fw-update][to_version][patch]")
          )
        )
      end
    '
  }
  geoip {
    source => "[ipv4]"
    target => "[source][geo]"
    fields => ["city_name", "country_name", "country_code2", "location", "region_name"]
  }
  mutate {
    rename => {
      "[box][hw]"                    => "[box][hardware_id]"
      "[box][name]"                  => "[box][product_name]"
      "[box][serial]"                => "[box][maca]"
      "[box][provider]"              => "[box][provider_key]"
      "[box]"                        => "[avm_fritzos_metadata]"
      "[ipv4]"                       => "[source][ip]"
      "[hostname]"                   => "[source][domain]"
      "[network]"                    => "[source][network]"
      "[source][geo][country_code2]" => "[source][geo][country_iso_code]"
    }
    copy => {
      "[source][ip]"      => "[source][address]"
    }
  }
}
output {
  elasticsearch {
  hosts => ["http://localhost:9200"]
  index => "filebeat-dhcp"
  }
}
