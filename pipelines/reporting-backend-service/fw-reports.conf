input {
	pipeline {
		address => "reporting-backend-service_fw-reports"
	}
}
filter {
	date {
		match => [ "[@metadata][kafka][timestamp]", "ISO8601" ]
	}
	mutate {
		rename => {
			"[fw-update][from_version]" => "[fw-update][from_version_original]"
			"[fw-update][to_version]" => "[fw-update][to_version_original]"
		}
		remove_field => [ "[type]", "[env]", "[@version]" ]
	}
	grok {
		match => { "[box][fw]" => "%{INT:[box][fw1]}.%{INT:[box][fw2]}.%{INT:[box][fw3]}" }
	}
	grok {
		match => { "[fw-update][from_version_original]" => "%{INT:[fw-update][from_version][fw1]}.%{INT:[fw-update][from_version][fw2]}.%{INT:[fw-update][from_version][fw3]},(%{INT:[fw-update][from_version][buildnumber]})?(%{WORD:[fw-update][from_version][buildnumber_lit]})?" }
		remove_field => [ "[fw-update][from_version_original]" ]
	}
	grok {
		match => { "[fw-update][to_version_original]" => "%{INT:[fw-update][to_version][fw1]}.%{INT:[fw-update][to_version][fw2]}.%{INT:[fw-update][to_version][fw3]},(%{INT:[fw-update][to_version][buildnumber]})?(%{WORD:[fw-update][to_version][buildnumber_lit]})?" }
		remove_field => [ "[fw-update][to_version_original]" ]
	}
	mutate {
		convert => {
			"[box][fw1]" => "integer"
			"[box][fw2]" => "integer"
			"[box][fw3]" => "integer"
			"[fw-update][from_version][fw1]" => "integer"
			"[fw-update][from_version][fw2]" => "integer"
			"[fw-update][from_version][fw3]" => "integer"
			"[fw-update][from_version][buildnumber]" => "integer"
			"[fw-update][to_version][fw1]" => "integer"
			"[fw-update][to_version][fw2]" => "integer"
			"[fw-update][to_version][fw3]" => "integer"
			"[fw-update][to_version][buildnumber]" => "integer"
		}
	}
	geoip {
		source => "[ipv4]"
		fields => ["city_name", "continent_code", "country_code2", "country_code3", "country_name", "location", "postal_code", "region_name", "timezone"]
	}
	ruby {
		code => '
			event.set(
				"[box][fw]",
				format("%02d.%02d",
					event.get("[box][fw2]"),
					event.get("[box][fw3]")
				)
			)
			unless event.get("[fw-update][from_version]").nil?
				event.set(
					"[fw-update][from_version][fw]",
					format("%02d.%02d",
						event.get("[fw-update][from_version][fw2]"),
						event.get("[fw-update][from_version][fw3]")
					)
				)
			end
			unless event.get("[fw-update][to_version]").nil?
				event.set(
					"[fw-update][to_version][fw]",
					format("%02d.%02d",
						event.get("[fw-update][to_version][fw2]"),
						event.get("[fw-update][to_version][fw3]")
					)
				)
			end
		'
	}
}
output {
	elasticsearch {
	hosts => ["http://localhost:9200"]
	index => "filebeat-dhcp"
	}
}
